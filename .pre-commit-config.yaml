# Pre-commit hooks configuration for comprehensive testing
# This configuration ensures code quality across all languages and file types

repos:
  # General hooks
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.4.0
    hooks:
      - id: trailing-whitespace
        name: Remove trailing whitespace
        description: Remove trailing whitespace from files
        types: [text]
      - id: end-of-file-fixer
        name: Fix end of file
        description: Ensure files end with a newline
        types: [text]
      - id: check-yaml
        name: Check YAML syntax
        description: Check YAML files for syntax errors
        types: [yaml]
      - id: check-json
        name: Check JSON syntax
        description: Check JSON files for syntax errors
        types: [json]
      - id: check-toml
        name: Check TOML syntax
        description: Check TOML files for syntax errors
        types: [toml]
      - id: check-merge-conflict
        name: Check for merge conflict markers
        description: Check for merge conflict markers in files
        types: [text]
      - id: check-added-large-files
        name: Check for large files
        description: Prevent large files from being committed
        args: ['--maxkb=1000']
      - id: check-case-conflict
        name: Check for case conflicts
        description: Check for case conflicts in filenames
      - id: check-executables-have-shebangs
        name: Check executables have shebangs
        description: Ensure executable files have proper shebangs
        types: [text]
      - id: check-shebang-scripts-are-executable
        name: Check shebang scripts are executable
        description: Ensure shebang scripts are executable
        types: [text]

  # JavaScript/TypeScript hooks
  - repo: https://github.com/pre-commit/mirrors-eslint
    rev: v8.50.0
    hooks:
      - id: eslint
        name: ESLint
        description: Run ESLint on JavaScript/TypeScript files
        types: [javascript, typescript, vue]
        additional_dependencies:
          - eslint@8.50.0
          - '@typescript-eslint/eslint-plugin@6.7.0'
          - '@typescript-eslint/parser@6.7.0'
          - 'eslint-plugin-vue@9.17.0'
          - 'eslint-plugin-unused-imports@2.0.0'
        args: ['--fix', '--max-warnings', '0']
        files: \.(js|ts|vue)$

  - repo: https://github.com/pre-commit/mirrors-prettier
    rev: v3.0.3
    hooks:
      - id: prettier
        name: Prettier
        description: Format code with Prettier
        types: [javascript, typescript, vue, json, yaml, markdown]
        args: ['--write']
        files: \.(js|ts|vue|json|yml|yaml|md)$

  # Python hooks
  - repo: https://github.com/psf/black
    rev: 23.7.0
    hooks:
      - id: black
        name: Black
        description: Format Python code with Black
        language_version: python3
        types: [python]
        args: ['--line-length', '88']

  - repo: https://github.com/pycqa/isort
    rev: 5.12.0
    hooks:
      - id: isort
        name: isort
        description: Sort Python imports
        types: [python]
        args: ['--profile', 'black']

  - repo: https://github.com/pycqa/flake8
    rev: 6.0.0
    hooks:
      - id: flake8
        name: Flake8
        description: Lint Python code with Flake8
        types: [python]
        args: ['--max-line-length=88', '--extend-ignore=E203,W503']

  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.5.1
    hooks:
      - id: mypy
        name: MyPy
        description: Type check Python code
        types: [python]
        additional_dependencies: [types-all]
        args: ['--ignore-missing-imports']

  # Java hooks
  - repo: https://github.com/diffplug/spotless
    rev: 6.20.0
    hooks:
      - id: spotless-java
        name: Spotless Java
        description: Format Java code with Spotless
        types: [java]
        args: ['apply']

  - repo: local
    hooks:
      - id: checkstyle-java
        name: Checkstyle Java
        description: Run Checkstyle on Java files
        entry: mvn checkstyle:check
        language: system
        types: [java]
        pass_filenames: false

  # Go hooks (if Go files exist)
  - repo: https://github.com/dnephin/pre-commit-golang
    rev: v1.0.0
    hooks:
      - id: go-fmt
        name: Go fmt
        description: Format Go code
        types: [go]
      - id: go-imports
        name: Go imports
        description: Format Go imports
        types: [go]
      - id: go-vet
        name: Go vet
        description: Run go vet
        types: [go]
      - id: go-test
        name: Go test
        description: Run go test
        types: [go]

  # Rust hooks (if Rust files exist)
  - repo: https://github.com/doublify/pre-commit-rust
    rev: v1.0
    hooks:
      - id: rustfmt
        name: Rust fmt
        description: Format Rust code
        types: [rust]
      - id: clippy
        name: Clippy
        description: Run Clippy linter
        types: [rust]

  # Docker hooks
  - repo: https://github.com/hadolint/hadolint
    rev: v2.12.0
    hooks:
      - id: hadolint
        name: Hadolint
        description: Lint Dockerfiles
        types: [dockerfile]

  # Shell hooks
  - repo: https://github.com/shellcheck-py/shellcheck-py
    rev: v0.9.0.6
    hooks:
      - id: shellcheck
        name: ShellCheck
        description: Lint shell scripts
        types: [shell]

  # Markdown hooks
  - repo: https://github.com/igorshubovych/markdownlint-cli
    rev: v0.35.0
    hooks:
      - id: markdownlint
        name: Markdownlint
        description: Lint Markdown files
        types: [markdown]
        args: ['--fix']

  # Security hooks
  - repo: https://github.com/Yelp/detect-secrets
    rev: v1.4.0
    hooks:
      - id: detect-secrets
        name: Detect secrets
        description: Detect secrets in code
        args: ['--baseline', '.secrets.baseline']

  # Custom hooks for this project
  - repo: local
    hooks:
      - id: vitest-unit-tests
        name: Vitest Unit Tests
        description: Run unit tests with Vitest
        entry: npx vitest run --reporter=verbose
        language: system
        types: [javascript, typescript]
        pass_filenames: false
        always_run: true

      - id: vitest-coverage-check
        name: Vitest Coverage Check
        description: Check test coverage
        entry: npx vitest run --coverage --reporter=json
        language: system
        types: [javascript, typescript]
        pass_filenames: false
        always_run: true

      - id: maven-test
        name: Maven Test
        description: Run Maven tests
        entry: mvn test
        language: system
        types: [java]
        pass_filenames: false
        always_run: true

      - id: python-tests
        name: Python Tests
        description: Run Python tests
        entry: python -m pytest test/ -v
        language: system
        types: [python]
        pass_filenames: false
        always_run: true

      - id: comprehensive-test-suite
        name: Comprehensive Test Suite
        description: Run comprehensive test suite
        entry: python3 test_comprehensive.py
        language: system
        pass_filenames: false
        always_run: true

      - id: build-check
        name: Build Check
        description: Ensure project builds successfully
        entry: npm run build
        language: system
        types: [javascript, typescript]
        pass_filenames: false
        always_run: true

      - id: type-check
        name: TypeScript Type Check
        description: Run TypeScript type checking
        entry: npx tsc --noEmit
        language: system
        types: [typescript]
        pass_filenames: false
        always_run: true

      - id: lint-staged
        name: Lint Staged
        description: Run lint-staged
        entry: npx lint-staged
        language: system
        pass_filenames: false
        always_run: true

# Configuration for specific tools
ci:
  autofix_commit_msg: |
    [pre-commit.ci] auto fixes from pre-commit.com hooks

    for more information, see https://pre-commit.ci
  autofix_prs: true
  autoupdate_branch: ''
  autoupdate_commit_msg: '[pre-commit.ci] pre-commit autoupdate'
  autoupdate_schedule: weekly
  skip: []
  submodules: false

# Default configuration
default_language_version:
  python: python3
  node: 18
  java: 17
  golang: 1.21
  rust: stable

# Minimum pre-commit version
minimum_pre_commit_version: 3.0.0