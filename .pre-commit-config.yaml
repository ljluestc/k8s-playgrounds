# Pre-commit hooks configuration for K8s Playgrounds
# This configuration ensures code quality and consistency across all languages

repos:
  # Basic file checks
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.4.0
    hooks:
      - id: trailing-whitespace
        name: Trim Trailing Whitespace
        description: Remove trailing whitespace
        types: [text]
        exclude: '\.(md|rst)$'
        
      - id: end-of-file-fixer
        name: Fix End of Files
        description: Ensure files end with a newline
        types: [text]
        
      - id: check-yaml
        name: Check YAML
        description: Check YAML syntax
        types: [yaml]
        args: ['--unsafe']
        
      - id: check-json
        name: Check JSON
        description: Check JSON syntax
        types: [json]
        
      - id: check-added-large-files
        name: Check for Large Files
        description: Prevent large files from being committed
        args: ['--maxkb=1000']
        
      - id: check-merge-conflict
        name: Check for Merge Conflicts
        description: Check for merge conflict markers
        types: [text]
        
      - id: check-case-conflict
        name: Check for Case Conflicts
        description: Check for case conflicts in file names
        
      - id: check-merge-conflict
        name: Check for Merge Conflicts
        description: Check for merge conflict markers
        
      - id: mixed-line-ending
        name: Mixed Line Ending
        description: Ensure consistent line endings
        args: ['--fix=lf']
        
      - id: check-executables-have-shebangs
        name: Check Executables Have Shebangs
        description: Ensure executable files have shebangs
        
      - id: check-shebang-scripts-are-executable
        name: Check Shebang Scripts Are Executable
        description: Ensure shebang scripts are executable

  # Python code formatting and linting
  - repo: https://github.com/psf/black
    rev: 23.3.0
    hooks:
      - id: black
        name: Black Python Formatter
        description: Format Python code with Black
        language_version: python3
        args: ['--line-length=88']
        types: [python]
        
  - repo: https://github.com/pycqa/isort
    rev: 5.12.0
    hooks:
      - id: isort
        name: isort Python Import Sorter
        description: Sort Python imports
        args: ['--profile=black', '--line-length=88']
        types: [python]
        
  - repo: https://github.com/pycqa/flake8
    rev: 6.0.0
    hooks:
      - id: flake8
        name: flake8 Python Linter
        description: Lint Python code with flake8
        args: ['--max-line-length=88', '--extend-ignore=E203,W503']
        types: [python]
        
  - repo: https://github.com/pycqa/bandit
    rev: 1.7.5
    hooks:
      - id: bandit
        name: Bandit Security Linter
        description: Security linting for Python
        args: ['-r', 'src/', '-f', 'json', '-o', 'bandit-report.json']
        types: [python]
        
  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.3.0
    hooks:
      - id: mypy
        name: MyPy Type Checker
        description: Type checking for Python
        args: ['--ignore-missing-imports', '--no-strict-optional']
        types: [python]

  # JavaScript/TypeScript code formatting and linting
  - repo: https://github.com/pre-commit/mirrors-eslint
    rev: v8.42.0
    hooks:
      - id: eslint
        name: ESLint JavaScript/TypeScript Linter
        description: Lint JavaScript and TypeScript code
        types: [javascript, typescript]
        files: \.(js|ts|vue)$
        args: ['--fix', '--max-warnings=0']
        
  - repo: https://github.com/pre-commit/mirrors-prettier
    rev: v3.0.0
    hooks:
      - id: prettier
        name: Prettier Code Formatter
        description: Format code with Prettier
        types: [javascript, typescript, json, yaml, markdown]
        args: ['--write', '--tab-width=2']
        
  - repo: https://github.com/pre-commit/mirrors-eslint
    rev: v8.42.0
    hooks:
      - id: eslint
        name: ESLint Vue Files
        description: Lint Vue.js files
        files: \.vue$
        args: ['--fix', '--max-warnings=0']

  # Go code formatting and linting
  - repo: https://github.com/dnephin/pre-commit-golang
    rev: v0.5.1
    hooks:
      - id: go-fmt
        name: Go fmt
        description: Format Go code with go fmt
        types: [go]
        
      - id: go-vet
        name: Go vet
        description: Run go vet
        types: [go]
        
      - id: go-imports
        name: Go imports
        description: Format Go imports
        types: [go]
        
      - id: go-mod-tidy
        name: Go mod tidy
        description: Tidy Go modules
        types: [go]
        files: go\.mod$
        
      - id: golangci-lint
        name: golangci-lint
        description: Run golangci-lint
        types: [go]
        args: ['--timeout=5m']

  # Java code formatting and linting
  - repo: https://github.com/checkstyle/checkstyle
    rev: checkstyle-10.9.3
    hooks:
      - id: checkstyle
        name: Checkstyle Java Linter
        description: Lint Java code with Checkstyle
        files: \.java$
        args: ['-c', 'checkstyle.xml']
        
  - repo: https://github.com/spotbugs/spotbugs
    rev: 4.7.3
    hooks:
      - id: spotbugs
        name: SpotBugs Java Bug Finder
        description: Find bugs in Java code
        files: \.java$

  # Dockerfile linting
  - repo: https://github.com/hadolint/hadolint
    rev: v2.12.0
    hooks:
      - id: hadolint
        name: Hadolint Dockerfile Linter
        description: Lint Dockerfiles
        files: Dockerfile.*
        args: ['--ignore', 'DL3008', '--ignore', 'DL3009']

  # YAML linting
  - repo: https://github.com/adrienverge/yamllint
    rev: v1.32.0
    hooks:
      - id: yamllint
        name: YAML Linter
        description: Lint YAML files
        args: ['-d', 'relaxed']

  # Markdown linting
  - repo: https://github.com/igorshubovych/markdownlint-cli
    rev: v0.35.0
    hooks:
      - id: markdownlint
        name: Markdown Linter
        description: Lint Markdown files
        args: ['--fix', '--config', '.markdownlint.json']
        types: [markdown]

  # Shell script linting
  - repo: https://github.com/shellcheck-py/shellcheck-py
    rev: v0.9.0.6
    hooks:
      - id: shellcheck
        name: ShellCheck
        description: Lint shell scripts
        types: [shell]

  # Custom hooks for project-specific checks
  - repo: local
    hooks:
      - id: test-unit
        name: Run Unit Tests
        description: Run unit tests before commit
        entry: python3 test_comprehensive.py --unit
        language: system
        pass_filenames: false
        always_run: true
        stages: [pre-commit]
        
      - id: test-coverage
        name: Check Test Coverage
        description: Ensure test coverage meets requirements
        entry: python3 test_comprehensive.py --coverage --threshold=100
        language: system
        pass_filenames: false
        always_run: true
        stages: [pre-commit]
        
      - id: security-scan
        name: Security Scan
        description: Run security scans
        entry: python3 test_comprehensive.py --security
        language: system
        pass_filenames: false
        always_run: true
        stages: [pre-commit]
        
      - id: build-check
        name: Build Check
        description: Ensure code builds successfully
        entry: |
          npm run build:check
          mvn compile -q
          go build ./...
        language: system
        pass_filenames: false
        always_run: true
        stages: [pre-commit]

  # Commit message linting
  - repo: https://github.com/commitizen-tools/commitizen
    rev: v3.5.3
    hooks:
      - id: commitizen
        name: Commitizen
        description: Enforce conventional commit messages
        stages: [commit-msg]

# Configuration for specific file types
default_stages: [commit]
default_language_version:
  python: python3
  node: 18
  golang: 1.20
  java: 17

# Minimum pre-commit version
minimum_pre_commit_version: 3.0.0

# Configuration for specific hooks
ci:
  autofix_commit_msg: |
    [pre-commit.ci] auto fixes from pre-commit.com hooks

    for more information, see https://pre-commit.ci
  autofix_prs: true
  autoupdate_branch: ''
  autoupdate_commit_msg: '[pre-commit.ci] pre-commit autoupdate'
  autoupdate_schedule: weekly
  skip: []
  submodules: false