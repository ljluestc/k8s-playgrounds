name: Comprehensive CI/CD Pipeline

on:
  push:
    branches: [main, develop, feature/*]
  pull_request:
    branches: [main, develop]
  schedule:
    - cron: '0 2 * * *' # Daily at 2 AM

env:
  NODE_VERSION: '18'
  GO_VERSION: '1.20'
  JAVA_VERSION: '17'
  PYTHON_VERSION: '3.10'
  COVERAGE_THRESHOLD: 100

jobs:
  # Code Quality and Security
  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: temurin

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          npm ci
          go mod download
          mvn dependency:resolve
          pip install -r requirements.txt

      - name: Lint TypeScript/JavaScript
        run: |
          npm run lint
          npm run lint:fix

      - name: Lint Go
        run: |
          go vet ./...
          golangci-lint run

      - name: Lint Java
        run: |
          mvn checkstyle:check
          mvn spotbugs:check

      - name: Lint Python
        run: |
          flake8 .
          black --check .
          isort --check-only .

      - name: Security scan - npm audit
        run: npm audit --audit-level=moderate

      - name: Security scan - Go
        run: |
          go list -json -deps ./... | nancy sleuth

      - name: Security scan - Java
        run: |
          mvn org.owasp:dependency-check-maven:check

      - name: Security scan - Python
        run: |
          bandit -r src/ -f json -o bandit-report.json
          safety check

  # Unit Tests
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: code-quality
    strategy:
      matrix:
        node-version: [18, 20]
        go-version: [1.19, 1.20]
        java-version: [17, 20]
        python-version: [3.9, 3.10]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: npm

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go-version }}

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: ${{ matrix.java-version }}
          distribution: temurin

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          npm ci
          go mod download
          mvn dependency:resolve
          pip install -r requirements.txt

      - name: Run TypeScript unit tests
        run: |
          npm run test:unit:backend
          npm run test:unit:frontend

      - name: Run Go unit tests
        run: |
          go test ./operator/... -v -cover -race

      - name: Run Java unit tests
        run: |
          mvn test -Pcoverage

      - name: Run Python unit tests
        run: |
          pytest test/unit/ -v --cov=src --cov-report=xml

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage/lcov.info,./target/site/jacoco/jacoco.xml,./coverage.xml
          flags: unit-tests
          name: unit-tests-${{ matrix.node-version }}-${{ matrix.go-version }}-${{ matrix.java-version }}-${{ matrix.python-version }}

  # Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

      kafka:
        image: confluentinc/cp-kafka:latest
        env:
          KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
          KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
          KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
        options: >-
          --health-cmd "kafka-topics --bootstrap-server localhost:9092 --list"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 9092:9092

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: temurin

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          npm ci
          go mod download
          mvn dependency:resolve
          pip install -r requirements.txt

      - name: Start test environment
        run: |
          docker-compose -f docker-compose.test.yml up -d
          sleep 30

      - name: Run TypeScript integration tests
        run: |
          npm run test:integration

      - name: Run Go integration tests
        run: |
          go test ./operator/... -tags=integration -v

      - name: Run Java integration tests
        run: |
          mvn verify -Pcoverage

      - name: Run Python integration tests
        run: |
          pytest test/integration/ -v --cov=src --cov-report=xml

      - name: Upload integration test coverage
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage/lcov.info,./target/site/jacoco/jacoco.xml,./coverage.xml
          flags: integration-tests
          name: integration-tests

      - name: Cleanup test environment
        if: always()
        run: |
          docker-compose -f docker-compose.test.yml down -v

  # End-to-End Tests
  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: integration-tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          npm ci
          pip install -r requirements.txt

      - name: Start application
        run: |
          npm run build
          npm run start:test &
          sleep 30

      - name: Run E2E tests
        run: |
          npm run test:e2e
          pytest test/e2e/ -v

      - name: Upload E2E test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: e2e-test-results
          path: test-results/

  # Performance Tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: e2e-tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          npm ci
          pip install -r requirements.txt

      - name: Start application
        run: |
          npm run build
          npm run start:test &
          sleep 30

      - name: Run performance tests
        run: |
          npm run test:performance
          python3 test_comprehensive.py --performance

      - name: Upload performance test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: performance-test-results
          path: performance-results/

  # Comprehensive Test Suite
  comprehensive-tests:
    name: Comprehensive Test Suite
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, e2e-tests, performance-tests]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup all environments
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
        run: |
          npm ci

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: temurin

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          go mod download
          mvn dependency:resolve
          pip install -r requirements.txt

      - name: Run comprehensive test suite
        run: |
          python3 test_comprehensive.py --all --coverage --performance --ui

      - name: Upload comprehensive test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: comprehensive-test-results
          path: test-reports/

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          files: ./test-reports/test_report.json
          flags: comprehensive
          name: comprehensive-tests

  # Build and Package
  build:
    name: Build & Package
    runs-on: ubuntu-latest
    needs: comprehensive-tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: temurin

      - name: Install dependencies
        run: |
          npm ci
          go mod download
          mvn dependency:resolve

      - name: Build frontend
        run: |
          npm run build:frontend

      - name: Build backend
        run: |
          npm run build:backend

      - name: Build operator
        run: |
          cd operator
          go build -o k8s-playgrounds-operator ./cmd/manager

      - name: Build Java components
        run: |
          mvn clean package -DskipTests

      - name: Build Docker images
        run: |
          docker build -t k8s-playgrounds-frontend:latest -f Dockerfile.frontend .
          docker build -t k8s-playgrounds-backend:latest -f Dockerfile.backend .
          docker build -t k8s-playgrounds-operator:latest -f Dockerfile.operator ./operator

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: |
            dist/
            target/
            operator/k8s-playgrounds-operator

  # Security Scanning
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: fs
          scan-ref: .
          format: sarif
          output: trivy-results.sarif

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: trivy-results.sarif

      - name: Run CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        with:
          languages: javascript, typescript, go, java, python

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, security-scan]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts

      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Add deployment commands here

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, security-scan]
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts

      - name: Deploy to production
        run: |
          echo "Deploying to production environment..."
          # Add deployment commands here

  # Notification
  notify:
    name: Notify
    runs-on: ubuntu-latest
    needs: [comprehensive-tests, build, security-scan]
    if: always()
    steps:
      - name: Notify success
        if: needs.comprehensive-tests.result == 'success' && needs.build.result == 'success' && needs.security-scan.result == 'success'
        run: |
          echo "All tests passed successfully!"

      - name: Notify failure
        if: needs.comprehensive-tests.result == 'failure' || needs.build.result == 'failure' || needs.security-scan.result == 'failure'
        run: |
          echo "Some tests failed. Please check the logs."
